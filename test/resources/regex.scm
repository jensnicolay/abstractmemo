(let ((debug-trace (lambda () (quote do-nothing))))
       (let ((cadr (lambda (p) (car (cdr p)))))
       (let ((caddr (lambda (p) (car (cdr (cdr p))))))
       (let ((regex-NULL #f))
       (let ((regex-BLANK #t))
       (let ((regex-alt? (lambda (re) (if (pair? re) (eq? (car re) (quote alt)) #f))))
       (let ((regex-seq? (lambda (re) (if (pair? re) (eq? (car re) (quote seq)) #f)))) 
       (let ((regex-rep? (lambda (re) (if (pair? re) (eq? (car re) (quote rep)) #f))))
       (let ((regex-null? (lambda (re) (eq? re #f))))
       (let ((regex-empty? (lambda (re) (eq? re #t))))
       (let ((regex-atom? (lambda (re) (let ((_t0 (char? re))) (if _t0 _t0 (symbol? re))))))
       (let ((match-seq (lambda (re f) (if (regex-seq? re) (f (cadr re) (caddr re)) #f))))
       (let ((match-alt (lambda (re f) (if (regex-alt? re) (f (cadr re) (caddr re)) #f))))
       (let ((match-rep (lambda (re f) (if (regex-rep? re) (f (cadr re)) #f))))
       (let ((seq (lambda (pat1 pat2) (if (regex-null? pat1) regex-NULL (if (regex-null? pat2) regex-NULL (if (regex-empty? pat1) pat2 (if (regex-empty? pat2) pat1 (cons (quote seq) (cons pat1 (cons pat2 (quote ())))))))))))
       (let ((alt (lambda (pat1 pat2) (if (regex-null? pat1) pat2 (if (regex-null? pat2) pat1 (cons (quote alt) (cons pat1 (cons pat2 (quote ()))))))))) 
       (let ((rep (lambda (pat) (if (regex-null? pat) regex-BLANK (if (regex-empty? pat) regex-BLANK (cons (quote rep) (cons pat (quote ()))))))))
       (letrec ((regex-empty (lambda (re) (if (regex-empty? re) #t (if (regex-null? re) #f (if (regex-atom? re) #f (let ((_t1 (match-seq re (lambda (pat1 pat2) (seq (regex-empty pat1) (regex-empty pat2)))))) (if _t1 _t1 (let ((_t2 (match-alt re (lambda (pat1 pat2) (alt (regex-empty pat1) (regex-empty pat2)))))) (if _t2 _t2 (if (regex-rep? re) #t #f)))))))))))
       (letrec ((regex-derivative (lambda (re c) (begin (debug-trace) (if (regex-empty? re) regex-NULL (if (regex-null? re) regex-NULL (if (eq? c re) regex-BLANK (if (regex-atom? re) regex-NULL (let ((_t3 (match-seq re (lambda (pat1 pat2) (alt (seq (regex-derivative pat1 c) pat2) (seq (regex-empty pat1) (regex-derivative pat2 c))))))) (if _t3 _t3 (let ((_t4 (match-alt re (lambda (pat1 pat2) (alt (regex-derivative pat1 c) (regex-derivative pat2 c)))))) (if _t4 _t4 (let ((_t5 (match-rep re (lambda (pat) (seq (regex-derivative pat c) (rep pat)))))) (if _t5 _t5 regex-NULL))))))))))))))
       (let ((d/dc regex-derivative))
       (letrec ((regex-match (lambda (pattern data) (if (null? data) (regex-empty? (regex-empty pattern)) (regex-match (d/dc pattern (car data)) (cdr data))))))
       (let ((check-expect (lambda (check expect) (equal? check expect))))
         (check-expect (regex-match (quote (seq foo (rep bar))) (quote (foo bar))) #t)))))))))))))))))))))))